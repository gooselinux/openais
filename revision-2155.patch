Index: services/ckpt.c
===================================================================
--- services/ckpt.c	(revision 2154)
+++ services/ckpt.c	(revision 2155)
@@ -916,7 +916,7 @@
 	struct checkpoint_section *checkpoint_section;
 
 	if (id_len != 0) {
-		log_printf (LOGSYS_LEVEL_DEBUG, "Finding checkpoint section id %s %d\n", (char*)id, id_len);
+		log_printf (LOGSYS_LEVEL_DEBUG, "Finding checkpoint section id %.*s %d\n", id_len, (char*)id, id_len);
 	}
 	else {
 		log_printf (LOGSYS_LEVEL_DEBUG, "Finding default checkpoint section\n");
@@ -929,7 +929,7 @@
 		checkpoint_section = list_entry (checkpoint_section_list,
 			struct checkpoint_section, list);
 		if (checkpoint_section->section_descriptor.section_id.id_len) {
-			log_printf (LOGSYS_LEVEL_DEBUG, "Checking section id %d %*s\n",
+			log_printf (LOGSYS_LEVEL_DEBUG, "Checking section id %d %.*s\n",
 				checkpoint_section->section_descriptor.section_id.id_len,
 				checkpoint_section->section_descriptor.section_id.id_len,
 				checkpoint_section->section_descriptor.section_id.id);
@@ -956,8 +956,10 @@
 			(memcmp (checkpoint_section->section_descriptor.section_id.id,
 			id, id_len) == 0)) {
 
-			log_printf (LOGSYS_LEVEL_DEBUG, "Returning section %s(0x%p)\n", checkpoint_section->section_descriptor.section_id.id,
-				checkpoint_section);
+			log_printf (LOGSYS_LEVEL_DEBUG, "Returning section %.*s(0x%p)\n",
+				    checkpoint_section->section_descriptor.section_id.id_len,
+				    checkpoint_section->section_descriptor.section_id.id,
+				    checkpoint_section);
 
 			return (checkpoint_section);
 		}
@@ -1437,9 +1439,11 @@
 	ckpt_id = (struct ckpt_identifier *)data;
 	log_printf (LOGSYS_LEVEL_DEBUG, "timer_function_section_expire data = 0x%p\n",data);
 	if (ckpt_id->ckpt_section_id.id_len && ckpt_id->ckpt_section_id.id) {
-		log_printf (LOGSYS_LEVEL_DEBUG, "Attempting to expire section %s in ckpt %s\n",
-			ckpt_id->ckpt_section_id.id,
-			ckpt_id->ckpt_name.value);
+		log_printf (LOGSYS_LEVEL_DEBUG, "Attempting to expire section %.*s in ckpt %.*s\n",
+			    ckpt_id->ckpt_section_id.id_len,
+			    ckpt_id->ckpt_section_id.id,
+			    ckpt_id->ckpt_name.length,
+			    ckpt_id->ckpt_name.value);
 	}
 	else {
 		log_printf (LOGSYS_LEVEL_ERROR, "timer_function_section_expire data incorect\n");
@@ -1451,8 +1455,9 @@
 		&ckpt_id->ckpt_name,
 		ckpt_id->ckpt_id);
         if (checkpoint == NULL) {
-		log_printf (LOGSYS_LEVEL_ERROR, "timer_function_section_expire could not find ckpt %s\n",
-                        ckpt_id->ckpt_name.value);
+		log_printf (LOGSYS_LEVEL_ERROR, "timer_function_section_expire could not find ckpt %.*s\n",
+			    ckpt_id->ckpt_name.length,
+			    ckpt_id->ckpt_name.value);
 		goto free_mem;
         }
 
@@ -1460,15 +1465,19 @@
 		(char *)ckpt_id->ckpt_section_id.id,
 		(int)ckpt_id->ckpt_section_id.id_len);
         if (checkpoint_section == 0) {
-		log_printf (LOGSYS_LEVEL_ERROR, "timer_function_section_expire could not find section %s in ckpt %s\n",
-                        ckpt_id->ckpt_section_id.id,
-                        ckpt_id->ckpt_name.value);
+		log_printf (LOGSYS_LEVEL_ERROR, "timer_function_section_expire could not find section %.*s in ckpt %.*s\n",
+			    ckpt_id->ckpt_section_id.id_len,
+			    ckpt_id->ckpt_section_id.id,
+			    ckpt_id->ckpt_name.length,
+			    ckpt_id->ckpt_name.value);
 		goto free_mem;
         }
 
-	log_printf (LOGSYS_LEVEL_DEBUG, "Expiring section %s in ckpt %s\n",
-                        ckpt_id->ckpt_section_id.id,
-                        ckpt_id->ckpt_name.value);
+	log_printf (LOGSYS_LEVEL_DEBUG, "Expiring section %.*s in ckpt %.*s\n",
+		    ckpt_id->ckpt_section_id.id_len,
+		    ckpt_id->ckpt_section_id.id,
+		    ckpt_id->ckpt_name.length,
+		    ckpt_id->ckpt_name.value);
 
 	checkpoint->section_count -= 1;
 	checkpoint_section_release (checkpoint_section);
@@ -1492,8 +1501,10 @@
 			struct checkpoint, expiry_list);
 
 		log_printf (LOGSYS_LEVEL_DEBUG,
-			"refcnt checkpoint %s %d\n",
-			get_mar_name_t (&checkpoint->name), checkpoint->reference_count);
+			    "refcnt checkpoint %.*s %d\n",
+			    checkpoint->name.length,
+			    checkpoint->name.value,
+			    checkpoint->reference_count);
 		if (checkpoint->reference_count == 0) {
 			req_exec_ckpt_checkpointunlink.header.size =
 				sizeof (struct req_exec_ckpt_checkpointunlink);
@@ -1516,8 +1527,8 @@
 				return (-1);
 			}
 			log_printf (LOGSYS_LEVEL_DEBUG,
-				"Expiring checkpoint %s\n",
-				get_mar_name_t (&checkpoint->name));
+				    "Expiring checkpoint %.*s\n",
+				    checkpoint->name.length, checkpoint->name.value);
 		}
 
 		list_del (&checkpoint->expiry_list);
@@ -1555,8 +1566,9 @@
 	SaAisErrorT error = SA_AIS_OK;
 	int release_checkpoint = 0;
 
-	log_printf (LOGSYS_LEVEL_DEBUG, "Got EXEC request to close checkpoint %s\n",
-		get_mar_name_t (&req_exec_ckpt_checkpointclose->checkpoint_name));
+	log_printf (LOGSYS_LEVEL_DEBUG, "Got EXEC request to close checkpoint %.*s\n",
+		    req_exec_ckpt_checkpointclose->checkpoint_name.length,
+		    req_exec_ckpt_checkpointclose->checkpoint_name.value);
 
 	checkpoint = checkpoint_find (
 		&checkpoint_list_head,
@@ -1674,8 +1686,9 @@
 		&req_exec_ckpt_checkpointretentiondurationset->checkpoint_name,
 		req_exec_ckpt_checkpointretentiondurationset->ckpt_id);
 	if (checkpoint) {
-		log_printf (LOGSYS_LEVEL_DEBUG, "Setting retention duration for checkpoint %s\n",
-			get_mar_name_t (&req_exec_ckpt_checkpointretentiondurationset->checkpoint_name));
+		log_printf (LOGSYS_LEVEL_DEBUG, "Setting retention duration for checkpoint %.*s\n",
+			    req_exec_ckpt_checkpointretentiondurationset->checkpoint_name.length,
+			    req_exec_ckpt_checkpointretentiondurationset->checkpoint_name.value);
 		if (checkpoint->unlinked == 0) {
 			checkpoint->checkpoint_creation_attributes.retention_duration =
 				req_exec_ckpt_checkpointretentiondurationset->retention_duration;
@@ -1721,11 +1734,14 @@
 		&checkpoint_list_head,
 		&req_exec_ckpt_checkpointretentiondurationexpire->checkpoint_name,
 		req_exec_ckpt_checkpointretentiondurationexpire->ckpt_id);
-		log_printf (LOGSYS_LEVEL_NOTICE, "Expiring checkpoint %s\n",
-			get_mar_name_t (&req_exec_ckpt_checkpointretentiondurationexpire->checkpoint_name));
+		log_printf (LOGSYS_LEVEL_NOTICE, "Expiring checkpoint %.*s\n",
+			    req_exec_ckpt_checkpointretentiondurationexpire->checkpoint_name.length,
+			    req_exec_ckpt_checkpointretentiondurationexpire->checkpoint_name.value);
+
 	if (checkpoint && (checkpoint->reference_count == 0)) {
-		log_printf (LOGSYS_LEVEL_NOTICE, "Expiring checkpoint %s\n",
-			get_mar_name_t (&req_exec_ckpt_checkpointretentiondurationexpire->checkpoint_name));
+		log_printf (LOGSYS_LEVEL_NOTICE, "Expiring checkpoint %.*s\n",
+			    req_exec_ckpt_checkpointretentiondurationexpire->checkpoint_name.length,
+			    req_exec_ckpt_checkpointretentiondurationexpire->checkpoint_name.value);
 
 		req_exec_ckpt_checkpointunlink.header.size =
 			sizeof (struct req_exec_ckpt_checkpointunlink);
@@ -1878,9 +1894,11 @@
 		memcpy(&ckpt_id->ckpt_section_id,
 			&checkpoint_section->section_descriptor.section_id,
 			sizeof(mar_ckpt_section_id_t));
-		log_printf (LOGSYS_LEVEL_DEBUG, "req_exec_ckpt_sectioncreate Enqueuing Timer to Expire section %s in ckpt %s\n",
-			ckpt_id->ckpt_section_id.id,
-			ckpt_id->ckpt_name.value);
+		log_printf (LOGSYS_LEVEL_DEBUG, "req_exec_ckpt_sectioncreate Enqueuing Timer to Expire section %.*s in ckpt %.*s\n",
+			    ckpt_id->ckpt_section_id.id_len,
+			    ckpt_id->ckpt_section_id.id,
+			    ckpt_id->ckpt_name.length,
+			    ckpt_id->ckpt_name.value);
 		api->timer_add_absolute (
 			checkpoint_section->section_descriptor.expiration_time,
 			ckpt_id,
@@ -1892,7 +1910,8 @@
 	}
 
 	log_printf (LOGSYS_LEVEL_DEBUG,
-		"message_handler_req_exec_ckpt_sectioncreate created section with id = %s, id_len = %d\n",
+		"message_handler_req_exec_ckpt_sectioncreate created section with id = %.*s, id_len = %d\n",
+		checkpoint_section->section_descriptor.section_id.id_len,
 		checkpoint_section->section_descriptor.section_id.id,
 		checkpoint_section->section_descriptor.section_id.id_len);
 	/*
@@ -2046,8 +2065,10 @@
 		memcpy(&ckpt_id->ckpt_section_id,
 			&checkpoint_section->section_descriptor.section_id,
 			sizeof(mar_ckpt_section_id_t));
-		log_printf (LOGSYS_LEVEL_DEBUG, "req_exec_ckpt_sectionexpirationtimeset Enqueuing Timer to Expire section %s in ckpt %s, ref = 0x%p\n",
+		log_printf (LOGSYS_LEVEL_DEBUG, "req_exec_ckpt_sectionexpirationtimeset Enqueuing Timer to Expire section %.*s in ckpt %.*s, ref = 0x%p\n",
+			ckpt_id->ckpt_section_id.id_len,
 			ckpt_id->ckpt_section_id.id,
+			ckpt_id->ckpt_name.length,
 			ckpt_id->ckpt_name.value,
 			ckpt_id);
 		api->timer_add_absolute (
@@ -2108,9 +2129,10 @@
 		goto error_exit;
 	}
 
-	log_printf (LOGSYS_LEVEL_DEBUG, "writing checkpoint section is %s\n",
+	log_printf (LOGSYS_LEVEL_DEBUG, "writing checkpoint section is %.*s\n",
+		req_exec_ckpt_sectionwrite->id_len,
 		((char *)req_exec_ckpt_sectionwrite) +
-			sizeof (struct req_exec_ckpt_sectionwrite));
+		    sizeof (struct req_exec_ckpt_sectionwrite));
 
 	/*
 	 * Find checkpoint section to be written
@@ -2124,9 +2146,10 @@
 			log_printf (LOGSYS_LEVEL_DEBUG, "CANT FIND DEFAULT SECTION.\n");
 		}
 		else {
-			log_printf (LOGSYS_LEVEL_DEBUG, "CANT FIND SECTION '%s'\n",
+			log_printf (LOGSYS_LEVEL_DEBUG, "CANT FIND SECTION '%.*s'\n",
+				req_exec_ckpt_sectionwrite->id_len,
 				((char *)req_exec_ckpt_sectionwrite) +
-				sizeof (struct req_exec_ckpt_sectionwrite));
+				    sizeof (struct req_exec_ckpt_sectionwrite));
 		}
 		error = SA_AIS_ERR_NOT_EXIST;
 		goto error_exit;
@@ -2818,9 +2841,10 @@
 		(int)req_lib_ckpt_sectionwrite->data_size,
 		(long)req_lib_ckpt_sectionwrite->data_offset);
 
-	log_printf (LOGSYS_LEVEL_DEBUG, "Checkpoint section being written to is %s, id_len = %d\n",
+	log_printf (LOGSYS_LEVEL_DEBUG, "Checkpoint section being written to is %.*s, id_len = %d\n",
+		req_lib_ckpt_sectionwrite->id_len,
 		((char *)req_lib_ckpt_sectionwrite) +
-			sizeof (struct req_lib_ckpt_sectionwrite),
+		    sizeof (struct req_lib_ckpt_sectionwrite),
 		req_lib_ckpt_sectionwrite->id_len);
 
 	log_printf (LOGSYS_LEVEL_DEBUG, "Section write from conn %p\n", conn);
@@ -4067,8 +4091,10 @@
 			return;
 		}
 
-		log_printf (LOGSYS_LEVEL_NOTICE, "Checkpoint %s (%d):",
-			checkpoint->name.value, checkpoint->name.length);
+		log_printf (LOGSYS_LEVEL_NOTICE, "Checkpoint %.*s (%d):",
+			    checkpoint->name.length,
+			    checkpoint->name.value,
+			    checkpoint->name.length);
 		log_printf (LOGSYS_LEVEL_NOTICE, "   id:       %u", checkpoint->ckpt_id);
 		log_printf (LOGSYS_LEVEL_NOTICE, "   sec cnt:  %u", checkpoint->section_count);
 		log_printf (LOGSYS_LEVEL_NOTICE, "   ref cnt:  %u", checkpoint->reference_count);
@@ -4081,7 +4107,8 @@
 			section = list_entry (checkpoint_section_list,
 				struct checkpoint_section, list);
 
-			log_printf (LOGSYS_LEVEL_DEBUG, "   Section %s (%d)",
+			log_printf (LOGSYS_LEVEL_DEBUG, "   Section %.*s (%d)",
+				section->section_descriptor.section_id.id_len,
 				section->section_descriptor.section_id.id,
 				section->section_descriptor.section_id.id_len);
 			log_printf (LOGSYS_LEVEL_DEBUG, "      size:     %"PRIu64,
